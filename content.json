{"pages":[{"title":"Tags","date":"2021-06-27T01:37:56.219Z","path":"tags/index.html","text":""},{"title":"About","date":"2021-06-27T01:37:56.188Z","path":"about/index.html","text":""},{"title":"Categories","date":"2021-06-27T01:37:56.199Z","path":"categories/index.html","text":""},{"title":"","date":"2021-06-29T07:25:15.503Z","path":"index-page.html","text":"Welcome to Fimon’s Wiki Site这是我的个人Wiki站点，用于记录平时学习的内容，方便以后查阅。 第一次接触Wiki这个词是20年夏天在Shopee深圳实习的时候，他们当时用的是Confluence，但是因为我那会主要做的是测试工具的开发，跟项目关联比较少，一个人在做，所以用的很少。不过对于第一次出来实习的我，这些工具还是给了我很大的冲击，以致在后来经常拿出来跟同学吹牛。 后来继续去了美团北京实习。美团的Wiki一直是他们拿出来宣传的东西——学城，工作时确实经常会在上面看文档，没事的时候也会在上面随便翻翻。时间长了，没有像宣传中所说的从新手到高手，倒是看了好多乱七八糟的东西，比如大家的分享、实习生的面试记录、招聘排序等，我的问题。 离职后觉得这样一个东西用来记记笔记还是很有必要的。当时最先了解到的是Wordpress，也搭建过自己的博客，但是总是不喜欢博客的那种风格，感觉博客更像是写给别人看的。后来也勉强用了一段时间，但是总感觉Wordpress有点复杂，对新手学习成本比较大，后来转而使用Github Pages，在翻Hexo主题时意外发现了这个主题，也算是一种缘分。 总之，感谢Wikitten作者的辛勤付出，也希望我的站点里有一些对你有帮助的内容。"}],"posts":[{"title":"union find","date":"2021-11-10T08:08:00.000Z","path":"wiki/Algorithms/algs4-Princeton/union-find/","text":"Quick-find Data structure: integer array id[] of length N; Union: to union p and q, change all entries whose id equals id[p] to id[q]; Find: check if p and q have the same id; Time Complexity: O(n) for union and O(1) for find; union is too expensive; 123456789101112void union(int p, int q) &#123; int pid = id[p]; int qid = id[q]; for (int i=0; i&lt;id.length; i++) &#123; if (id[i] == pid) id[i] = qid; &#125;&#125; boolean find(int p, int q) &#123; return id[p] == id[q];&#125; Quick-union(lazy approach) Union: to union p and q, set the id of p’s root to q’s root; Find: check if p and q have the same root; Time complexity: O(n) for union and O(n) for find; trees can get very tall, and find will be expensive; 123456789101112131415int root(int i) &#123; while (i != id[i]) i = id[i]; return i;&#125;void union(int p, int q) &#123; int i = root(p); int j = root(q); id[i] = j;&#125;boolean find(int p, int q) &#123; return root(p) == root(q);&#125; Weighted Quick-union Modify quick-union to avoid tall trees: keep track of size of each tree; balance by linking root of smaller tree to root of larger tree; Time Complexity: O(lgN) for union and O(lgN) for find; Depth of any node is at most lgN (this can be proved); 123456789101112131415int[] sz = new int[id.length];void union(int p, int q) &#123; int i = root(p); int j = root(q); if (i != j) &#123; if (sz[i] &lt; sz[j]) &#123; id[i] = j; sz[j] += sz[i]; &#125; else &#123; id[j] = i; sz[i] += sz[j]; &#125; &#125;&#125; Quick-union with path compression After computing root of p, set the id of each examined node to point to that root; Time complexity: O(lg*N) for both union and find; 1234567int root(int i) &#123; while (i != id[i]) &#123; id[i] = id[id[i]]; i = id[i]; &#125; return i;&#125;","tags":[],"categories":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://wiki.hellofimon.icu/categories/Algorithms/"},{"name":"algs4-Princeton","slug":"Algorithms/algs4-Princeton","permalink":"http://wiki.hellofimon.icu/categories/Algorithms/algs4-Princeton/"}]},{"title":"Welcome to Fimon's Wiki Site","date":"2021-06-29T07:30:33.000Z","path":"wiki/index/","text":"这是我的个人Wiki站点，用于记录平时学习的内容，方便以后查阅。 第一次接触Wiki这个词是20年夏天在Shopee深圳实习的时候，他们当时用的是Confluence，但是因为我那会主要做的是测试工具的开发，跟项目关联比较少，一个人在做，所以用的很少。不过对于第一次出来实习的我，这些工具还是给了我很大的冲击，以致在后来经常拿出来跟同学吹牛。 后来继续去了美团北京实习。美团的Wiki一直是他们拿出来宣传的东西——学城，工作时确实经常会在上面看文档，没事的时候也会在上面随便翻翻。时间长了，没有像宣传中所说的从新手到高手，倒是看了好多乱七八糟的东西，比如大家的分享、实习生的面试记录、招聘排序等，我的问题。 离职后觉得这样一个东西用来记记笔记还是很有必要的。当时最先了解到的是Wordpress，也搭建过自己的博客，但是总是不喜欢博客的那种风格，感觉博客更像是写给别人看的。后来也勉强用了一段时间，但是总感觉Wordpress有点复杂，对新手学习成本比较大，后来转而使用Github Pages，在翻Hexo主题时意外发现了这个主题，也算是一种缘分。 总之，感谢Wikitten作者的辛勤付出，也希望我的站点里有一些对你有帮助的内容。","tags":[],"categories":[]},{"title":"搭建步骤","date":"2021-06-29T02:25:27.000Z","path":"wiki/关于本站/搭建步骤/","text":"本地安装 Hexo1234npm install -g hexo# 查看版本hexo -v 创建项目文件夹本地新建文件夹，作为存放项目文件的位置。进入文件夹后，执行hexo初始化命令： 1hexo init 可以直接使用Git Bash。 更换主题将目标hexo主题的资源下载到themes文件夹下，这里以Wikitten为例： 1git clone https://github.com/zthxxx/hexo-theme-Wikitten.git themes/Wikitten 关于此主题的使用可直接参考其文档（参考-2）。 参数配置有两个文件需要配置，一个是hexo项目的_config.yml，一个是Wikitten主题的_config.yml。 项目配置文件，下面列出了需要补充或修改的内容（结合官方文档使用）： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465# Hexo Configuration# Sitetitle: Fimon&#x27;s Wikisubtitle: &#x27;&#x27;description: &#x27;&#x27;keywords:author: Fimonlanguage: entimezone: Asia/Shanghai# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: http://wiki.hellofimon.icu/permalink: wiki/:title/# Directoryskip_render: - README.md# Writing## Markdownmarked: gfm: true ## PluginsjsonContent: meta: false pages: title: true date: true path: true text: true posts: title: true date: true path: true text: true tags: true categories: true ignore: - 404.html ### Creat sitemapsitemap: path: sitemap.xml ## https://github.com/zthxxx/hexo-directory-category auto_dir_categorize: enable: true force: false# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/## 切换主题theme: wikitten# Deployment## Docs: https://hexo.io/docs/one-command-deployment## 通过Github部署，通过此配置可直接由hexo d部署deploy: type: git repository: git@github.com:xxx/xxx.git branch: master 主题配置文件没有太多需要修改，参考官方文档即可。 部署12345678# 生成页面hexo g# 本地预览hexo s# 部署hexo d 绑定域名在项目下新建一个CNAME文件，在其中输入自定义的域名。下图为Github-&gt;Settings-&gt;Pages截图，设置Custom Domin本质上也是在项目中加上CNAME文件，但是通过此种方式设置的CNAME文件会在下次部署时被覆盖掉。可以在本地将CNAME文件放到ｓｏｕｒｃｅ文件夹下，这样可以避免文件被覆盖（logo等图标同理，参考－３）。 去DNS域名服务商添加相应的记录： 注意选择CNAME方式。 参考资料 hexo安装及使用：https://sspai.com/post/62441 Wikitten使用文档：https://github.com/zthxxx/hexo-theme-Wikitten/blob/master/README_zh-CN.md 避免CNAME文件被覆盖：https://www.jianshu.com/p/b6fe1c5c74ed 更换域名：https://zhuanlan.zhihu.com/p/60578464；https://segmentfault.com/a/1190000003946969","tags":[],"categories":[{"name":"关于本站","slug":"关于本站","permalink":"http://wiki.hellofimon.icu/categories/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99/"}]}]}