<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fimon&#39;s Wiki</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wiki.hellofimon.icu/"/>
  <updated>2022-06-19T01:45:31.246Z</updated>
  <id>http://wiki.hellofimon.icu/</id>
  
  <author>
    <name>Fimon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bits, Bytes, and Integers</title>
    <link href="http://wiki.hellofimon.icu/wiki/ATZ/CSAPP/L1/"/>
    <id>http://wiki.hellofimon.icu/wiki/ATZ/CSAPP/L1/</id>
    <published>2022-06-18T12:38:00.000Z</published>
    <updated>2022-06-19T01:45:31.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bits-Bytes-and-Integers"><a href="#Bits-Bytes-and-Integers" class="headerlink" title="Bits, Bytes, and Integers"></a>Bits, Bytes, and Integers</h1><ul><li><p>Shift Operations</p><ul><li><p>right shift: x &gt;&gt; y</p><p>logical shift: fill with 0s on left;</p><p>arithmetic shift: replicate most significant bit on left;</p></li><li><p>undefined behavior </p><p>shift amount &lt; 0 or &gt;= word size</p><p>e.g. x &lt;&lt; 8, while x is a byte, usually the result will be x, because they will do 8 % 8 first;</p></li></ul></li><li><p>Numeric Ranges</p><p>signed value: 10010: -16 + 2 = -14</p><p>so the minimum number is 10000 = -16</p><p>the maximum number is 01111 = 15</p><p>so the range is $-2^{w-1}$ ~ $2^{w-1}-1$</p><p>11111 = -1; (signed) x1 = 10110 = -10, (unsigned) x2 = 10110 = 22, x2 - x1 = 32;</p></li><li><p>Signed and Unsigned in C</p><ul><li>If there is a mix of unsigned and signed in single expression, signed values implicitly cast to unsigned. <strong>This includes comparison operations</strong>, so sometimes it will lead to unanticipated outcomes when comparing signed numbers and unsigned numbers.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>when x = $T_{MIN}$ in above code, it will still return $T_{MIN}$ (corner case);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i=n; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// this will never stop, i always &gt;= 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n; i-<span class="keyword">sizeof</span>(<span class="keyword">char</span>)&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// this will also never stop, sizeof() returns an unsigned value</span></span><br></pre></td></tr></table></figure></li><li><p>Sign extension</p><p>(4 digits) 1011 -&gt; (6 digits) 111011 </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bits-Bytes-and-Integers&quot;&gt;&lt;a href=&quot;#Bits-Bytes-and-Integers&quot; class=&quot;headerlink&quot; title=&quot;Bits, Bytes, and Integers&quot;&gt;&lt;/a&gt;Bits, Bytes, an
      
    
    </summary>
    
      <category term="ATZ" scheme="http://wiki.hellofimon.icu/categories/ATZ/"/>
    
      <category term="csapp" scheme="http://wiki.hellofimon.icu/categories/ATZ/csapp/"/>
    
    
      <category term="system" scheme="http://wiki.hellofimon.icu/tags/system/"/>
    
      <category term="csapp" scheme="http://wiki.hellofimon.icu/tags/csapp/"/>
    
  </entry>
  
  <entry>
    <title>priority queue</title>
    <link href="http://wiki.hellofimon.icu/wiki/ATZ/algs4-Princeton/priority-queue/"/>
    <id>http://wiki.hellofimon.icu/wiki/ATZ/algs4-Princeton/priority-queue/</id>
    <published>2021-12-30T03:49:00.000Z</published>
    <updated>2022-06-19T01:34:19.369Z</updated>
    
    <content type="html"><![CDATA[<p> Priority Queue: remove the largest (or smallest) item.</p><h2 id="Binary-Heaps"><a href="#Binary-Heaps" class="headerlink" title="Binary Heaps"></a>Binary Heaps</h2><ul><li>binary tree</li><li>complete tree: perfectly balanced, except for the bottom line;</li></ul><p>binary heap: array representation of a heap-ordered complete binary tree;</p><ul><li>indices start at 1;</li><li>parent of node <em>k</em> is at <em>k/2</em>;</li><li>children of node <em>k</em> are at <em>2k</em> and <em>2k+1</em> ;</li></ul><p>APIs:</p><ul><li>insert: add node at end, then swim it up;</li><li>delete max: exchange root with node at end, then sink it down;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxPQ</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] pq;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(<span class="keyword">int</span> initSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initSize &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">this</span>.pq = <span class="keyword">new</span> <span class="keyword">int</span>[initSize];</span><br><span class="line">        <span class="keyword">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        pq[++N] = x;</span><br><span class="line">        swim(N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k/<span class="number">2</span>, k)) &#123;</span><br><span class="line">            exch(k/<span class="number">2</span>, k);</span><br><span class="line">            k = k / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Error: can&#x27;t delete from an empty pq!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = pq[<span class="number">1</span>];</span><br><span class="line">        exch(<span class="number">1</span>, N--);</span><br><span class="line">        sink(<span class="number">1</span>);</span><br><span class="line">        pq[N + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= N) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; N &amp;&amp; less(j, j + <span class="number">1</span>))</span><br><span class="line">                j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(k, j))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            exch(k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pq[i] &lt; pq[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = pq[i];</span><br><span class="line">        pq[i] = pq[j];</span><br><span class="line">        pq[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Heap-Sort"><a href="#Heap-Sort" class="headerlink" title="Heap Sort"></a>Heap Sort</h2><p>create max-heap with all N keys, repeatedly remove the maximum key;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        MaxPQ pq = <span class="keyword">new</span> MaxPQ(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr)</span><br><span class="line">            pq.insert(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            arr[i] = pq.delMax();</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = N / <span class="number">2</span>; k &gt;= <span class="number">0</span>; k--)</span><br><span class="line">            sink(arr, k, N);</span><br><span class="line">        <span class="keyword">while</span> (N &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            exch(arr, <span class="number">0</span>, --N);</span><br><span class="line">            sink(arr, <span class="number">0</span>, N);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * k + <span class="number">1</span> &lt; N) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; N - <span class="number">1</span> &amp;&amp; less(arr, j, j + <span class="number">1</span>))</span><br><span class="line">                j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(arr, k, j))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            exch(arr, k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[i] &lt; arr[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In-place sorting algorithm with <em>N log N</em> worst-case.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; Priority Queue: remove the largest (or smallest) item.&lt;/p&gt;
&lt;h2 id=&quot;Binary-Heaps&quot;&gt;&lt;a href=&quot;#Binary-Heaps&quot; class=&quot;headerlink&quot; title=&quot;Binar
      
    
    </summary>
    
      <category term="ATZ" scheme="http://wiki.hellofimon.icu/categories/ATZ/"/>
    
      <category term="algs4-Princeton" scheme="http://wiki.hellofimon.icu/categories/ATZ/algs4-Princeton/"/>
    
    
      <category term="algo" scheme="http://wiki.hellofimon.icu/tags/algo/"/>
    
      <category term="priority queue" scheme="http://wiki.hellofimon.icu/tags/priority-queue/"/>
    
      <category term="heap" scheme="http://wiki.hellofimon.icu/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>sort</title>
    <link href="http://wiki.hellofimon.icu/wiki/ATZ/algs4-Princeton/sort/"/>
    <id>http://wiki.hellofimon.icu/wiki/ATZ/algs4-Princeton/sort/</id>
    <published>2021-12-17T11:41:00.000Z</published>
    <updated>2022-06-19T01:34:30.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h2><p>In iteration i, find index min of smallest remaining entry. Swap a[i] and a[min].</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">              min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, p, min);</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>N^2/2 compares and N exchanges;</p><p>time complexity: O(n^2), quadratic time, even if input is sorted;</p><h2 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h2><p>In iteration i, swap a[i] with each larger entry to its left.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j-<span class="number">1</span>]; j--) &#123;</span><br><span class="line">          swap(arr, j, j-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>best case (the array is already sorted): N-1 compares, 0 exchanges;</p><p>worst case (the array is in descending order): N^2/2 compares and N^2/2 exchanges;</p><p>time complexity: O(n^2)</p><h2 id="Shell-Sort"><a href="#Shell-Sort" class="headerlink" title="Shell Sort"></a>Shell Sort</h2><p>Move entries more than one position at a time by h-sorting the array.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// with increment = 3x+1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; n / <span class="number">3</span>)</span><br><span class="line">    h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; arr[j] &lt; arr[j-h]; j -= h) &#123;</span><br><span class="line">            swap(arr, j, j-h);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    h = h / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h2><p>Divide array into two halves, recursively sort each half, merge two halves.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span>[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// copy</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= hi; i++)</span><br><span class="line">      aux[i] = arr[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = lo;</span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid)</span><br><span class="line">          arr[k] = aux[j++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi)</span><br><span class="line">          arr[k] = aux[i++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (aux[i] &lt; aux[j])</span><br><span class="line">          arr[k] = aux[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          arr[k] = aux[j++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span>[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">    sort(arr, aux, lo, mid);</span><br><span class="line">    sort(arr, aux, mid + <span class="number">1</span>, hi);</span><br><span class="line">    merge(arr, aux, lo, mid, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Analysis: at most NlgN compares, time complexity is O(n * lgn), space complexity is O(N), need an auxiliary array;</p><h2 id="Bottom-up-Merge-Sort"><a href="#Bottom-up-Merge-Sort" class="headerlink" title="Bottom-up Merge Sort"></a>Bottom-up Merge Sort</h2><p>Pass through array, merging subarrays of size 1, repeat for subarrays of size 2, 4, 8, 16, ….</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bottomupMergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span>[] aux)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; n; sz *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; n - sz; lo += <span class="number">2</span> * sz) &#123;</span><br><span class="line">          merge(arr, aux, lo, lo + sz - <span class="number">1</span>, Math.min(n-<span class="number">1</span>, lo + <span class="number">2</span> * sz - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    StdRandom.shuffle(arr);</span><br><span class="line">    quickSortHelper(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">quickSortHelper</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lo &gt;= hi)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = partition(arr, lo, hi);</span><br><span class="line">    quickSortHelper(arr, lo, mid - <span class="number">1</span>);</span><br><span class="line">    quickSortHelper(arr, mid + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = arr[lo];</span><br><span class="line">    <span class="keyword">int</span> i = lo;</span><br><span class="line">    <span class="keyword">int</span> j = hi + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[++i] &lt; pivot)</span><br><span class="line">            <span class="keyword">if</span> (i == hi)</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (pivot &lt; arr[--j])</span><br><span class="line">            <span class="keyword">if</span> (j == lo)</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j)</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        swap(arr, i, j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    swap(arr, lo, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Analysis:</p><ul><li>number of compares is ~ N * lg N;</li><li> in worst case (already sorted), number of compares is ~ 1/2 N^2;</li><li>average case: N * lg N</li><li>so <strong>shuffling is needed for performance guarantee</strong>;</li><li><strong>in place but not stable</strong>;</li></ul><h3 id="quick-select"><a href="#quick-select" class="headerlink" title="quick select"></a>quick select</h3><p>Idea: entry a[j] is in place, no larger entry to the left of j, no smaller entry to the right of j; repeat in one subarray, depending on j; finished when j equals k.</p><p>Exp: LC-215 [<a href="https://leetcode.com/problems/kth-largest-element-in-an-array/]">https://leetcode.com/problems/kth-largest-element-in-an-array/]</a></p><p><strong>takes linear time on average</strong></p><h3 id="duplicate-keys"><a href="#duplicate-keys" class="headerlink" title="duplicate keys"></a>duplicate keys</h3><p>Algorithm goes quadratic unless partitioning stops on equal keys!</p><p>3-way partition:</p><p>partition array into 3 parts so that: entries between lt and gt equal to partition item v; no larger entries to left of lt; no smaller entries to right of gt;</p><p>(see dutch national flags in interview questions)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortThreeWay</span><span class="params">(<span class="keyword">int</span>[]arr, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> lt = lo;</span><br><span class="line">    <span class="keyword">int</span> gt = hi;</span><br><span class="line">    <span class="keyword">int</span> pivot = arr[lo];</span><br><span class="line">    <span class="keyword">int</span> i = lo;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; pivot)</span><br><span class="line">          swap(arr, lt++, i++);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; pivot)</span><br><span class="line">          swap(arr, i, gt--);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sortThreeWay(arr, lo, lt - <span class="number">1</span>);</span><br><span class="line">    sortThreeWay(arr, gt + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Analysis:</p><ul><li>N lg N when all distinct; linear when only a constant number of distinct keys;</li><li>randomized quicksort with 3-way partitioning reduces running time from linearithmic to linear in broad class of applications;</li></ul><h2 id="System-Sorts"><a href="#System-Sorts" class="headerlink" title="System Sorts"></a>System Sorts</h2><p>Arrays.sort():</p><ul><li>has different method for each primitive type;</li><li>has a method for data types that implement Comparable;</li><li>has a method that uses a Comparator;</li><li>uses tuned quicksort for primitive types; tuned mergesort for objects;</li></ul><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><img src="https://gitee.com/fimon_lu/img-bed/raw/master/image-20211222222249772.png" alt="image-20211222222249772"></p><h2 id="Complexity-of-Sorting"><a href="#Complexity-of-Sorting" class="headerlink" title="Complexity of Sorting"></a>Complexity of Sorting</h2><p>Model of computation: decision tree;</p><p>Cost model: # compares;</p><p>Upper bound: N * lg N (from merge sort);</p><p>Lower bound: lg(N!) ~ N * lg N (from decision tree);</p><p>Optimal algorithm: merge sort (with respect to number compares, not to space usage);</p><h2 id="Comparable-and-Comparator-in-Java"><a href="#Comparable-and-Comparator-in-Java" class="headerlink" title="Comparable and Comparator in Java"></a>Comparable and Comparator in Java</h2><h3 id="Comparable-Interface"><a href="#Comparable-Interface" class="headerlink" title="Comparable Interface"></a>Comparable Interface</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age - o.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Comparator-Interface"><a href="#Comparator-Interface" class="headerlink" title="Comparator Interface"></a>Comparator Interface</h3><p>we can compare the same data type in different ways using comparator interface;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;Student&gt; BY_NAME = <span class="keyword">new</span> ByName();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;Student&gt; BY_AGE = <span class="keyword">new</span> ByAge();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByName</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1.name.compareTo(o2.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByAge</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1.age - o2.age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stability"><a href="#Stability" class="headerlink" title="Stability"></a>Stability</h2><p>A stable sort preserves the relative order of items with equal keys. Equal items never move past each other.</p><p><strong>Insertion Sort</strong> and <strong>Merge Sort</strong> are stable.</p><h2 id="Interview-Questions"><a href="#Interview-Questions" class="headerlink" title="Interview Questions"></a>Interview Questions</h2><ul><li><p><strong>Dutch national flag.</strong> See LC-75 (<a href="https://leetcode.com/problems/sort-colors/">https://leetcode.com/problems/sort-colors/</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums == <span class="keyword">null</span>) </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> p0 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p2 = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= p2) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (nums[i]) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                swap(nums, i, p2);</span><br><span class="line">                p2--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: </span><br><span class="line">                swap(nums, i, p0);</span><br><span class="line">                p0++;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Counting inversions</strong>. An <em>inversion</em> in an array <em>a</em>[] is a pair of entries <em>a</em>[<em>i</em>] and <em>a</em>[<em>j</em>] such that <em>i</em>&lt;*j* but *a*[*i*]&gt;<em>a</em>[<em>j</em>]. Given an array, design a linearithmic algorithm to count the number of inversions.</p><p>Hint: count while mergesorting;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">mergeAndCount</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span>[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    System.arraycopy(arr, lo, aux, lo, hi - lo + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = lo;</span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = lo;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= hi) &#123;</span><br><span class="line">        <span class="comment">// arr[k++] = aux[i] &lt;= aux[j] ? aux[i++] : aux[j++];</span></span><br><span class="line">        <span class="keyword">if</span> (aux[i] &lt;= aux[j]) &#123;</span><br><span class="line">          arr[k++] = aux[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          arr[k++] = aux[j++];</span><br><span class="line">          count += mid - i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">      arr[k++] = aux[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= hi) &#123;</span><br><span class="line">      arr[k++] = aux[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">mergeSortAndCount</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span>[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">    count += mergeSortAndCount(arr, aux, lo, mid);</span><br><span class="line">    count += mergeSortAndCount(arr, aux, mid + <span class="number">1</span>, hi);</span><br><span class="line">    count += mergeAndCount(arr, aux, lo, mid, hi);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reference: <a href="https://www.geeksforgeeks.org/counting-inversions/">https://www.geeksforgeeks.org/counting-inversions/</a></p></li><li><p><strong>Selection in two sorted arrays.</strong> Given two sorted arrays <em>a</em>[] and <em>b</em>[], of lengths <em>n</em>1 and <em>n</em>2 and an integer 0≤<em>k</em>&lt;<em>n</em>1+<em>n</em>2, design an algorithm to find a key of rank <em>k</em>. The order of growth of the worst case running time of your algorithm should be log <em>n</em>, where <em>n</em>=<em>n</em>1+<em>n</em>2.</p><p>reference: <a href="https://www.geeksforgeeks.org/k-th-element-two-sorted-arrays/">https://www.geeksforgeeks.org/k-th-element-two-sorted-arrays/</a></p><p>LC-4 [<a href="https://leetcode.com/problems/median-of-two-sorted-arrays/]">https://leetcode.com/problems/median-of-two-sorted-arrays/]</a></p><p>explain: <a href="https://www.youtube.com/watch?v=q6IEA26hvXc">https://www.youtube.com/watch?v=q6IEA26hvXc</a></p></li><li><p><strong>Decimal dominants.</strong> Given an array with n<em>n</em> keys, design an algorithm to find all values that occur more than <em>n</em>/10 times. The expected running time of your algorithm should be linear.</p><p>R: <a href="https://massivealgorithms.blogspot.com/2019/03/decimal-dominants.html">https://massivealgorithms.blogspot.com/2019/03/decimal-dominants.html</a></p></li></ul><h2 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h2><p><a href="https://coursera.cs.princeton.edu/algs4/assignments/collinear/specification.php">https://coursera.cs.princeton.edu/algs4/assignments/collinear/specification.php</a></p><p><a href="https://github.com/Fimon12138/coursera/tree/master/algs4_princeton/collinear">https://github.com/Fimon12138/coursera/tree/master/algs4_princeton/collinear</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Selection-Sort&quot;&gt;&lt;a href=&quot;#Selection-Sort&quot; class=&quot;headerlink&quot; title=&quot;Selection Sort&quot;&gt;&lt;/a&gt;Selection Sort&lt;/h2&gt;&lt;p&gt;In iteration i, find i
      
    
    </summary>
    
      <category term="ATZ" scheme="http://wiki.hellofimon.icu/categories/ATZ/"/>
    
      <category term="algs4-Princeton" scheme="http://wiki.hellofimon.icu/categories/ATZ/algs4-Princeton/"/>
    
    
      <category term="algo" scheme="http://wiki.hellofimon.icu/tags/algo/"/>
    
      <category term="sort" scheme="http://wiki.hellofimon.icu/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>stacks and queues</title>
    <link href="http://wiki.hellofimon.icu/wiki/ATZ/algs4-Princeton/stacks-and-queues/"/>
    <id>http://wiki.hellofimon.icu/wiki/ATZ/algs4-Princeton/stacks-and-queues/</id>
    <published>2021-12-02T05:44:00.000Z</published>
    <updated>2022-06-19T01:34:41.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><ul><li>LIFO: last in first out</li><li>API: push(), pop(), isEmpty()</li><li>Implementation: <ul><li>linked-list:<ul><li>maintain pointer to first node in a linked list, insert/remove from front;</li><li>O(1) time complexity for every operation in worst case;</li><li>40 N bytes for a stack with N items (in Java);</li></ul></li><li>resizing array:<ul><li>client is required to provide capacity at the beginning;</li><li>if array is full, create a new array of twice the size, and copy items;</li><li>halve size of array s[] when array is one-quarter full;</li><li>better space complexity;</li></ul></li></ul></li></ul><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><ul><li>FIFO: first in first out</li><li>API: enqueue(), dequeue(), isEmpty()</li><li>implementation:<ul><li>linked-list:<ul><li>maintain pointer to first and last nodes in a linked list, insert at end of linked list, remove from front of linked list;</li></ul></li><li>resizing array:<ul><li>Update head and tail modulo the capacity;</li></ul></li></ul></li></ul><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><ul><li>Dijkstra’s two-stack algorithm (calculator)</li></ul><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><ul><li>Implement a queue with two stacks so that each queue operations takes a constant amortized number of stack operations;</li><li>Create a data structure that efficiently supports the stack operations (push and pop) and also a return-the-maximum operation. Assume the elements are real numbers so that you can compare them;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Stack&quot;&gt;&lt;a href=&quot;#Stack&quot; class=&quot;headerlink&quot; title=&quot;Stack&quot;&gt;&lt;/a&gt;Stack&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;LIFO: last in first out&lt;/li&gt;
&lt;li&gt;API: push(), pop(),
      
    
    </summary>
    
      <category term="ATZ" scheme="http://wiki.hellofimon.icu/categories/ATZ/"/>
    
      <category term="algs4-Princeton" scheme="http://wiki.hellofimon.icu/categories/ATZ/algs4-Princeton/"/>
    
    
      <category term="algo" scheme="http://wiki.hellofimon.icu/tags/algo/"/>
    
      <category term="data structure" scheme="http://wiki.hellofimon.icu/tags/data-structure/"/>
    
      <category term="stack" scheme="http://wiki.hellofimon.icu/tags/stack/"/>
    
      <category term="queue" scheme="http://wiki.hellofimon.icu/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://wiki.hellofimon.icu/wiki/Tools/Git/"/>
    <id>http://wiki.hellofimon.icu/wiki/Tools/Git/</id>
    <published>2021-12-01T14:28:00.000Z</published>
    <updated>2021-12-16T03:30:52.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://git-scm.com/docs">https://git-scm.com/docs</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><p>配置 ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>初始化 git 仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>添加远程仓库， origin 是远程仓库别名，可以为一个本地仓库关联多个远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@xxx</span><br></pre></td></tr></table></figure></li><li><p>关联本地分支和远程分支，也可以在 push 时使用 -u</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/master master</span><br><span class="line"></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>强制关联两个不相关分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --allow-unrelated-histories</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://git-scm.com/docs&quot;&gt;https:/
      
    
    </summary>
    
      <category term="Tools" scheme="http://wiki.hellofimon.icu/categories/Tools/"/>
    
    
      <category term="git" scheme="http://wiki.hellofimon.icu/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>11/2021</title>
    <link href="http://wiki.hellofimon.icu/wiki/%E6%97%A5%E8%AE%B0/112021/"/>
    <id>http://wiki.hellofimon.icu/wiki/日记/112021/</id>
    <published>2021-11-28T14:28:00.000Z</published>
    <updated>2021-12-17T20:05:25.888Z</updated>
    
    <content type="html"><![CDATA[<p>感恩节的假期什么也没干，本来计划好好写的作业也一点没动，一个OA耗了很长时间，记一些小的细节，日后有空整理整理：</p><ul><li>apt-get 的 node 版本太低，新版的 node 自带 npm， 不用单独安装；</li><li>nginx 部署 Vue 后页面 403 可能是 nginx 权限不够，直接给 root 权限；</li><li>Express；</li><li>Jest，Vue 的单元测试；</li><li>Vue 3，vue-cli；</li></ul><p>同学们陆续都上岸了，我连面试都没有，good luck 吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;感恩节的假期什么也没干，本来计划好好写的作业也一点没动，一个OA耗了很长时间，记一些小的细节，日后有空整理整理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apt-get 的 node 版本太低，新版的 node 自带 npm， 不用单独安装；&lt;/li&gt;
&lt;li&gt;nginx 部署 Vue 
      
    
    </summary>
    
      <category term="日记" scheme="http://wiki.hellofimon.icu/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>union find</title>
    <link href="http://wiki.hellofimon.icu/wiki/ATZ/algs4-Princeton/union-find/"/>
    <id>http://wiki.hellofimon.icu/wiki/ATZ/algs4-Princeton/union-find/</id>
    <published>2021-11-10T08:08:00.000Z</published>
    <updated>2022-06-19T01:34:50.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-find"><a href="#Quick-find" class="headerlink" title="Quick-find"></a>Quick-find</h2><ul><li><p>Data structure: integer array id[] of length N;</p></li><li><p>Union: to union p and q, change all entries whose id equals id[p] to id[q];</p></li><li><p>Find: check if p and q have the same id;</p></li><li><p>Time Complexity: O(n) for union and O(1) for find;</p><p>union is too expensive;</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pid = id[p];</span><br><span class="line"><span class="keyword">int</span> qid = id[q];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;id.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (id[i] == pid)</span><br><span class="line">id[i] = qid;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id[p] == id[q];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Quick-union"><a href="#Quick-union" class="headerlink" title="Quick-union"></a>Quick-union</h2><p>(lazy approach)</p><ul><li><p>Union: to union p and q, set the id of p’s root to q’s root;</p></li><li><p>Find: check if p and q have the same root;</p></li><li><p>Time complexity: O(n) for union and O(n) for find;</p><p>trees can get very tall, and find will be expensive;</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (i != id[i])</span><br><span class="line">i = id[i];</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = root(p);</span><br><span class="line">    <span class="keyword">int</span> j = root(q);</span><br><span class="line">    id[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> root(p) == root(q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Weighted-Quick-union"><a href="#Weighted-Quick-union" class="headerlink" title="Weighted Quick-union"></a>Weighted Quick-union</h2><ul><li><p>Modify quick-union to avoid tall trees:</p><ul><li>keep track of size of each tree;</li><li>balance by linking root of smaller tree to root of larger tree;</li></ul></li><li><p>Time Complexity: O(lgN) for union and O(lgN) for find;</p><p>Depth of any node is at most lgN (this can be proved);</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] sz = <span class="keyword">new</span> <span class="keyword">int</span>[id.length];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = root(p);</span><br><span class="line">    <span class="keyword">int</span> j = root(q);</span><br><span class="line">    <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sz[i] &lt; sz[j]) &#123;</span><br><span class="line">            id[i] = j;</span><br><span class="line">            sz[j] += sz[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            id[j] = i;</span><br><span class="line">            sz[i] += sz[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Quick-union-with-path-compression"><a href="#Quick-union-with-path-compression" class="headerlink" title="Quick-union with path compression"></a>Quick-union with path compression</h2><ul><li>After computing root of p, set the id of each examined node to point to that root;</li><li>Time complexity: O(lg*N) for both union and find;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i != id[i]) &#123;</span><br><span class="line">        id[i] = id[id[i]];</span><br><span class="line">        i = id[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quick-find&quot;&gt;&lt;a href=&quot;#Quick-find&quot; class=&quot;headerlink&quot; title=&quot;Quick-find&quot;&gt;&lt;/a&gt;Quick-find&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Data structure: integer array
      
    
    </summary>
    
      <category term="ATZ" scheme="http://wiki.hellofimon.icu/categories/ATZ/"/>
    
      <category term="algs4-Princeton" scheme="http://wiki.hellofimon.icu/categories/ATZ/algs4-Princeton/"/>
    
    
      <category term="algo" scheme="http://wiki.hellofimon.icu/tags/algo/"/>
    
      <category term="union-find" scheme="http://wiki.hellofimon.icu/tags/union-find/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to Fimon&#39;s Wiki Site</title>
    <link href="http://wiki.hellofimon.icu/wiki/index/"/>
    <id>http://wiki.hellofimon.icu/wiki/index/</id>
    <published>2021-06-29T07:30:33.000Z</published>
    <updated>2022-06-19T01:26:26.938Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的个人 Wiki 站点，用于记录平时学习的内容，方便以后查阅。</p><p>第一次接触 Wiki 这个词是 20 年夏天在 Shopee 深圳实习的时候，当时用的是 Confluence。后来继续去了美团北京实习，美团的 Wiki（学城），除了给工作带来了很大的便利，也丰富了空闲时间。 </p><p>后来觉得学习的过程中有这样一个东西用来记记笔记还是很有必要的。之前也尝试搭建过博客，但是总感觉博客更像是写给别人看的。因为感觉 Wordpress 有点复杂且学习成本较高，就转向了 Github Pages，在浏览 Hexo 主题时意外发现了这个主题，也算是一种缘分。</p><p>感谢 Wikitten 的作者，也希望我的站点里有一些对你有帮助的内容。</p><p><a href="/wiki/setup/">搭建步骤</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是我的个人 Wiki 站点，用于记录平时学习的内容，方便以后查阅。&lt;/p&gt;
&lt;p&gt;第一次接触 Wiki 这个词是 20 年夏天在 Shopee 深圳实习的时候，当时用的是 Confluence。后来继续去了美团北京实习，美团的 Wiki（学城），除了给工作带来了很大的便利
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建步骤</title>
    <link href="http://wiki.hellofimon.icu/wiki/setup/"/>
    <id>http://wiki.hellofimon.icu/wiki/setup/</id>
    <published>2021-06-29T02:25:27.000Z</published>
    <updated>2022-06-19T01:22:12.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本地安装-Hexo"><a href="#本地安装-Hexo" class="headerlink" title="本地安装 Hexo"></a>本地安装 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h2 id="创建项目文件夹"><a href="#创建项目文件夹" class="headerlink" title="创建项目文件夹"></a>创建项目文件夹</h2><p>本地新建文件夹，作为存放项目文件的位置。进入文件夹后，执行hexo初始化命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>可以直接使用<strong>Git Bash</strong>。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>将目标hexo主题的资源下载到themes文件夹下，这里以Wikitten为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zthxxx/hexo-theme-Wikitten.git themes/Wikitten</span><br></pre></td></tr></table></figure><p>关于此主题的使用可直接参考其文档（参考-2）。</p><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>有两个文件需要配置，一个是hexo项目的_config.yml，一个是Wikitten主题的_config.yml。</p><p>项目配置文件，下面列出了需要补充或修改的内容（结合官方文档使用）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Fimon&#x27;s</span> <span class="string">Wiki</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Fimon</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://wiki.hellofimon.icu/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">wiki/:title/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">README.md</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="comment">## Markdown</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">gfm:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">## Plugins</span></span><br><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line">  <span class="attr">meta:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">text:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ignore:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">404.</span><span class="string">html</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">### Creat sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">## https://github.com/zthxxx/hexo-directory-category</span></span><br><span class="line"><span class="attr">auto_dir_categorize:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">force:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment">## 切换主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">wikitten</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="comment">## 通过Github部署，通过此配置可直接由hexo d部署</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:xxx/xxx.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>主题配置文件没有太多需要修改，参考官方文档即可。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成页面</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地预览</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>在项目下新建一个CNAME文件，在其中输入自定义的域名。下图为Github-&gt;Settings-&gt;Pages截图，设置Custom Domin本质上也是在项目中加上CNAME文件，但是通过此种方式设置的CNAME文件会在下次部署时被覆盖掉。可以在本地将CNAME文件放到ｓｏｕｒｃｅ文件夹下，这样可以避免文件被覆盖（logo等图标同理，参考－３）。</p><p><img src="https://gitee.com/fimon_lu/img-bed/raw/master/Snipaste_2021-06-29_11-17-43.png" alt="Github Setting页截图"></p><p>去DNS域名服务商添加相应的记录：</p><p><img src="https://gitee.com/fimon_lu/img-bed/raw/master/Snipaste_2021-06-29_14-40-51.png"></p><p>注意选择CNAME方式。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li>hexo安装及使用：<a href="https://sspai.com/post/62441">https://sspai.com/post/62441</a></li><li>Wikitten使用文档：<a href="https://github.com/zthxxx/hexo-theme-Wikitten/blob/master/README_zh-CN.md">https://github.com/zthxxx/hexo-theme-Wikitten/blob/master/README_zh-CN.md</a></li><li>避免CNAME文件被覆盖：<a href="https://www.jianshu.com/p/b6fe1c5c74ed">https://www.jianshu.com/p/b6fe1c5c74ed</a></li><li>更换域名：<a href="https://zhuanlan.zhihu.com/p/60578464%EF%BC%9Bhttps://segmentfault.com/a/1190000003946969">https://zhuanlan.zhihu.com/p/60578464；https://segmentfault.com/a/1190000003946969</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;本地安装-Hexo&quot;&gt;&lt;a href=&quot;#本地安装-Hexo&quot; class=&quot;headerlink&quot; title=&quot;本地安装 Hexo&quot;&gt;&lt;/a&gt;本地安装 Hexo&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://wiki.hellofimon.icu/tags/hexo/"/>
    
  </entry>
  
</feed>
